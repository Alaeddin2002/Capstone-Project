\i untitled2.py 
;
\i untitled2.py 
SEKECt * FROM PC;
SELECt * FROM PC;
\i untitled2.py 
\q
\q
\i 2-4-1-creates.sql 
\q
CREATE VIEW LaptopProduct ASSELECT*;
CREATE VIEW LaptopProduct ASSELECT *FROM PRODUCT NATURAL JOIN LAPTOP;
SELECT LaptopProduct;
VIEW LaptopProduct;
SELECT * FROM  LaptopProduct;
SELECT * FROM  LaptopProduct WHERE Screen > 16;
DROP LaptopProduct
\i 2-4-1-creates.sql 
CREATE VIEW LaptopProduct ASSELECT *FROM PRODUCT NATURAL JOIN LAPTOP;
DROP LaptopProduct;
CREATE VIEW LaptopProduct ASSELECT *FROM PRODUCT NATURAL JOIN LAPTOP;
SELECT * FROM  LaptopProduct WHERE Screen > 16;
SELECT * FROM PC;
DROP LaptopProduct;
\i 2-4-1-inserts.sql 
CREATE VIEW LaptopProduct ASSELECT *FROM PRODUCT NATURAL JOIN LAPTOP;
DROP VIEW LaptopProduct;
CREATE VIEW LaptopProduct ASSELECT *FROM PRODUCT NATURAL JOIN LAPTOP;
SELECT * FROM  LaptopProduct WHERE Screen > 16;
\i Dataset.sql 
SELECT * From Netflix_Dataset_Movie;
\i Netflix_Dataset_movie.csv
\i Netflix_Dataset_Movie.csv
COPY tablename(attribute1, attribute2, attribute3, attribute4...)FROM './path/to/file.csv'DELIMITER ','CSV HEADER;
COPY Netflix_Dataset_Movie(Movie_ID,Year,Name)FROM 'Netflix_Dataset_Movie.csv'DELIMITER ','CSV HEADER;
\COPY Netflix_Dataset_Movie(Movie_ID,Year,Name)FROM 'Netflix_Dataset_Movie.csv'DELIMITER ','CSV HEADER;
\COPY Netflix_Dataset_Movie(Movie_ID,Year_,Name)FROM 'Netflix_Dataset_Movie.csv'DELIMITER ','CSV HEADER;
SELECT * From Netflix_Dataset_Movie;
\COPY Netflix_Dataset_Rating(User_ID,Rating,Movie_ID,Key_)FROM 'Netflix_Dataset_Rating.csv'DELIMITER ','CSV HEADER;
SELECT COUNT (Movie_ID) FROM Netflix_Dataset_Movie;
SELECT * From Netflix_Dataset_Movie;
SELECT * From Netflix_Dataset_Movie where Movie_ID = '17700';
SELECT * From Netflix_Dataset_Movie where Movie_ID = '17701';
SELECT * From Netflix_Dataset_Movie where Movie_ID = '177071';
SELECT * From Netflix_Dataset_Movie where Movie_ID = '17771';
SELECT * From Netflix_Dataset_Movie where Movie_ID = '17770';
qSELECT * From Netflix_Dataset_Movie;
SELECT * From Netflix_Dataset_Movie;
SELECT * From Netflix_Dataset_Ranking;
SELECT * From Netflix_Dataset_Ranting;
SELECT * From Netflix_Dataset_Rating;
SELECT * From Netflix_Dataset_Rating WHERE User_ID = '2081473';
SELECT User_ID,AVG(rating) FROM Netflix_Dataset_Rating GROUP BY (User_ID);
SELECT * From Netflix_Dataset_Rating WHERE User_ID = '6';
SELECT User_ID,MAX(rating) FROM Netflix_Dataset_Rating GROUP BY (User_ID);
SELECT Movie_ID,AVG(rating) FROM Netflix_Dataset_Rating GROUP BY (Movie_ID);
SELECT * FROM Netflix_Dataset_Rating ORDER BY (Year_);
SELECT * FROM Netflix_Dataset_Movie ORDER BY (Year_);
SELECT * FROM Netflix_Dataset_Movie,Netflix_Data_Set_Rating ORDER BY (Year_);
SELECT * FROM Netflix_Dataset_Movie,Netflix_Dataset_Rating ORDER BY (Year_);
SELECT * FROM Netflix_Dataset_Movie,Netflix_Dataset_Rating;
SELECT * FROM Netflix_Dataset_Movie NATURAL JOIN Netflix_Dataset_Rating;
SELECT * From Netflix_Dataset_Rating WHERE User_ID = '6';
\i untitled.py
\q
SELECT Name,AVG(rating) FROM Netflix_Dataset_Rating Natural JOIN Netflix_Dataset_Movie GROUP BY (Name) Limit ;
\q
CREATE OR REPLACE FUNCTION preventPCPriceIncrease() RETURNStrigger AS$$BEGIN IF (OLD.price < NEW.price) THEN RAISE NOTICE 'Preventing price increase'; RETURN NULL; END IF; RETURN NEW;END;$$LANGUAGE plpgsql;
DROP FUNCTION preventPCPriceIncrease();
CREATE OR REPLACE FUNCTION preventPCPriceIncrease() RETURNStrigger AS$$BEGIN IF (OLD.price < NEW.price) THEN RAISE NOTICE 'Preventing price increase'; RETURN NULL; END IF; RETURN NEW;END;$$LANGUAGE plpgsql;
\q
CREATE TRIGGER PCPriceTriggerBEFORE UPDATE OF price ON PCFOR EACH ROWWHEN (OLD.price < NEW.price) EXECUTE PROCEDURE revertPCPrice();
CREATE TRIGGER PCPriceTriggerBEFORE UPDATE OF price ON PCFOR EACH ROWWHEN (OLD.price < NEW.price) EXECUTE PROCEDURE RevertPCPrice();
\q
\q
\q
\i Day26.SQL
\i Day27.SQL
\ds PC
\ds Laptop
\ds PC
\i Day27.SQL
\i Day27.SQL
\q
SELECT Name,AVG(rating) FROM Netflix_Dataset_Rating Natural JOIN Netflix_Dataset_Movie GROUP BY (Name) ORDER BY AVG(rating) Limit 5;
\q
SELECT Name,MAX(rating) FROM Netflix_Dataset_Rating Natural JOIN Netflix_Dataset_Movie GROUP BY (Name) ORDER BY AVG(rating);
SELECT Name,AVG(rating) FROM Netflix_Dataset_Rating Natural JOIN Netflix_Dataset_Movie GROUP BY (Name) ORDER BY AVG(rating) DESC Limit 5;
SELECT Name,AVG(rating) FROM Netflix_Dataset_Rating Natural JOIN Netflix_Dataset_Movie GROUP BY (Name) ORDER BY Year_ DESC Limit 5;
SELECT Name,AVG(rating) FROM Netflix_Dataset_Rating Natural JOIN Netflix_Dataset_Movie GROUP BY (Year_) ORDER BY Year_ DESC Limit 5;
SELECT Year_,AVG(rating) FROM Netflix_Dataset_Rating Natural JOIN Netflix_Dataset_Movie GROUP BY (Year_) ORDER BY AVG(rating) DESC Limit 5;
SELECT Year_,AVG(rating) FROM Netflix_Dataset_Rating Natural JOIN Netflix_Dataset_Movie GROUP BY (Year_) ORDER BY Year_ DESC Limit 5;
SELECT Year_,MAX(rating) FROM Netflix_Dataset_Rating Natural JOIN Netflix_Dataset_Movie GROUP BY (Year_) ORDER BY Year_ DESC Limit 5;
SELECT Year_,MAX(rating) FROM Netflix_Dataset_Rating Natural JOIN Netflix_Dataset_Movie GROUP BY (Year_) ORDER BY Year_ DESC Limit 10;
SELECT Year_,MAX(rating) FROM Netflix_Dataset_Rating Natural JOIN Netflix_Dataset_Movie GROUP BY (Year_) ORDER BY Year_ DESC Limit 30;
SELECT _,MAX(rating) FROM Netflix_Dataset_Rating Natural JOIN Netflix_Dataset_Movie GROUP BY (Year_) ORDER BY Year_ DESC Limit 50;
SELECT Name,Max(rating) FROM Netflix_Dataset_Rating Natural JOIN Netflix_Dataset_Movie GROUP BY (Name) ORDER BY MAX(rating) DESC Limit 5;
SELECT Name,Max(rating) FROM Netflix_Dataset_Rating Natural JOIN Netflix_Dataset_Movie GROUP BY (Name) ORDER BY MAX(rating) DESC Limit 20;
SELECT SELECT User_ID,MAX(rating) FROM Netflix_Dataset_Rating GROUP BY (User_ID);
SELECT User_ID,MAX(rating) FROM Netflix_Dataset_Rating GROUP BY (User_ID) LIMIT BY 5;
SELECT User_ID,MAX(rating) FROM Netflix_Dataset_Rating GROUP BY (User_ID) LIMIT 5;
SELECT User_ID,AVG(rating) FROM Netflix_Dataset_Rating GROUP BY (User_ID) LIMIT 5;
SELECT User_ID,AVG(rating) FROM Netflix_Dataset_Rating GROUP BY (User_ID) LIMIT 5;
SELECT User_ID,AVG(rating) FROM Netflix_Dataset_Rating GROUP BY (AVG_Rating) LIMIT 5;
SELECT User_ID,AVG(rating) FROM Netflix_Dataset_Rating GROUP BY (AVG(Rating)) LIMIT 5;
SELECT User_ID,AVG(rating) FROM Netflix_Dataset_Rating GROUP BY (AVG(rating)) LIMIT 5;
SELECT User_ID,AVG(rating) FROM Netflix_Dataset_Rating GROUP BY ((rating)) LIMIT 5;
SELECT User_ID,AVG(rating) FROM Netflix_Dataset_Rating GROUP BY (User_ID) LIMIT 5;
SELECT User_ID,AVG(rating) FROM Netflix_Dataset_Rating GROUP BY (User_ID) ORDER BY AVG(Rating)LIMIT 5;
SELECT User_ID,AVG(rating) FROM Netflix_Dataset_Rating GROUP BY (User_ID) ORDER BY AVG(Rating) DESC LIMIT 5;
SELECT User_ID,AVG(rating) FROM Netflix_Dataset_Rating GROUP BY (User_ID) ORDER BY AVG(Rating) DESC LIMIT 10;
SELECT User_ID,AVG(rating) FROM Netflix_Dataset_Rating GROUP BY (User_ID) HAVING COUNT(rating) ORDER BY AVG(Rating) DESC LIMIT 10;
SELECT User_ID,AVG(rating) FROM Netflix_Dataset_Rating GROUP BY (User_ID)  ORDER BY AVG(Rating) DESC LIMIT 10;
SELECT COUNT(user_ID) FROM Netflix_Dataset_Rating;
SELECT COUNT(5568) FROM Netflix_Dataset_Rating;
SELECT COUNT(User_ID) FROM Netflix_Dataset_Rating Having User_ID = User_ID;
SELECT COUNT(User_ID) FROM Netflix_Dataset_Rating GROUP BY (User_ID);
SELECT COUNT(User_ID) FROM Netflix_Dataset_Rating GROUP BY (User_ID) HAVING COUNT (User_ID) > 15;
SELECT COUNT(User_ID) FROM Netflix_Dataset_Rating GROUP BY (User_ID) HAVING COUNT (User_ID) > 22;
SELECT COUNT(User_ID) FROM Netflix_Dataset_Rating GROUP BY (User_ID) HAVING COUNT (User_ID) > 34;
SELECT COUNT(User_ID) FROM Netflix_Dataset_Rating GROUP BY (User_ID) HAVING COUNT (User_ID) > 50;
SELECT COUNT(User_ID) FROM Netflix_Dataset_Rating GROUP BY (User_ID) HAVING COUNT (User_ID) > 200;
SELECT COUNT(User_ID) FROM Netflix_Dataset_Rating GROUP BY (User_ID) HAVING COUNT (User_ID) > 100;
SELECT COUNT(User_ID) FROM Netflix_Dataset_Rating GROUP BY (User_ID) HAVING COUNT (User_ID) > 80;
SELECT User_ID, AVG(Rating),COUNT(User_ID) FROM Netflix_Dataset_Rating GROUP BY (User_ID) HAVING COUNT (User_ID) > 80;
SELECT User_ID, AVG(Rating),COUNT(User_ID) FROM Netflix_Dataset_Rating GROUP BY (User_ID) HAVING COUNT (User_ID) > 80 ORDER BY AVG(Rating);
\q
SELECT User_ID, AVG(Rating),COUNT(User_ID) FROM Netflix_Dataset_Rating GROUP BY (User_ID) ORDER BY AVG(Rating) DESC LIMIT 1;
SELECT User_ID, AVG(Rating),COUNT(User_ID) FROM Netflix_Dataset_Rating GROUP BY (User_ID) HAVING COUNT (User_ID) > 80 ORDER BY AVG(Rating) DESC LIMIT 1 ;
SELECT User_ID FROM Netflix_Dataset_Rating GROUP BY (User_ID) HAVING COUNT (User_ID) > 80 ORDER BY AVG(Rating) DESC LIMIT 1 ;
SELECT User_ID FROM Netflix_Dataset_Rating GROUP BY (User_ID) HAVING AVG (User_ID) >= ANY (SELE
SELECT User_ID, AVG(Rating),COUNT(User_ID) FROM Netflix_Dataset_Rating GROUP BY (User_ID) HAVING COUNT (User_ID) >= (COUNT(User_ID) FROM Netflix_Dataset_Rating) ORDER BY AVG(Rating) DESC LIMIT 1 ;
SELECT User_ID, AVG(Rating),COUNT(User_ID) FROM Netflix_Dataset_Rating GROUP BY (User_ID) HAVING COUNT (User_ID) >= ANY(COUNT(User_ID) FROM Netflix_Dataset_Rating) ORDER BY AVG(Rating) DESC LIMIT 1 ;
COUNT(User_ID) FROM Netflix_Dataset_Rating;
SELECT User_ID, AVG(Rating),COUNT(User_ID) FROM Netflix_Dataset_Rating GROUP BY (User_ID) HAVING COUNT (User_ID) >= ANY(SELECT COUNT(User_ID) FROM Netflix_Dataset_Rating) ORDER BY AVG(Rating) DESC LIMIT 1 ;
SELECT User_ID, AVG(Rating),COUNT(User_ID) FROM Netflix_Dataset_Rating GROUP BY (User_ID) HAVING COUNT (User_ID) >= ANY(SELECT COUNT(User_ID) FROM Netflix_Dataset_Rating) ORDER BY AVG(Rating) DESC LIMIT 1 ;
SELECT User_ID, AVG(Rating),COUNT(User_ID) FROM Netflix_Dataset_Rating GROUP BY (User_ID) HAVING COUNT (User_ID) >= ANY(SELECT COUNT(User_ID) FROM Netflix_Dataset_Rating) ORDER BY AVG(Rating) DESC LIMIT 5 ;
SELECT User_ID, AVG(Rating),COUNT(User_ID) FROM Netflix_Dataset_Rating GROUP BY (User_ID) HAVING COUNT (User_ID) >= ALL(SELECT COUNT(User_ID) FROM Netflix_Dataset_Rating) ORDER BY AVG(Rating) DESC LIMIT 5 ;
SELECT User_ID, AVG(Rating),COUNT(User_ID) FROM Netflix_Dataset_Rating GROUP BY (User_ID) HAVING COUNT (User_ID) >= ALL(SELECT COUNT(User_ID) FROM Netflix_Dataset_Rating) DESC LIMIT 5 ;
SELECT User_ID, AVG(Rating),COUNT(User_ID) FROM Netflix_Dataset_Rating GROUP BY (User_ID) HAVING COUNT (User_ID) >= ALL(SELECT COUNT(User_ID) FROM Netflix_Dataset_Rating)  LIMIT 5 ;
SELECT User_ID, AVG(Rating),COUNT(User_ID) FROM Netflix_Dataset_Rating GROUP BY (User_ID) HAVING COUNT (User_ID) > ALL(SELECT COUNT(User_ID) FROM Netflix_Dataset_Rating)  LIMIT 5 ;
SELECT User_ID,COUNT(User_ID) FROM Netflix_Dataset_Rating GROUP BY (User_ID) HAVING COUNT (User_ID) > ALL(SELECT COUNT(User_ID) FROM Netflix_Dataset_Rating)  LIMIT 5 ;
SELECT User_ID,COUNT(User_ID) FROM Netflix_Dataset_Rating GROUP BY (User_ID) HAVING COUNT (User_ID)  LIMIT 5 ;
SELECT User_ID,COUNT(User_ID) FROM Netflix_Dataset_Rating GROUP BY (User_ID)   LIMIT 5 ;
SELECT User_ID,COUNT(User_ID) FROM Netflix_Dataset_Rating GROUP BY (User_ID) ORDER BY COUNT(User_ID)  LIMIT 5 ;
SELECT User_ID,COUNT(User_ID) FROM Netflix_Dataset_Rating GROUP BY (User_ID) ORDER BY COUNT(User_ID) DESC LIMIT 5 ;
SELECT User_ID, AVG(Rating),COUNT(User_ID) FROM Netflix_Dataset_Rating GROUP BY (User_ID) ORDER BY count(user_ID) DESC LIMIT 5;
\q
SELECT Rating FROM Netflix_Dataset_Rating WHERE User_ID = (SELECT User_ID FROM Netflix_Dataset_Rating GROUP BY (User_ID) ORDER BY count(user_ID) DESC LIMIT 1) ;
SELECT Rating FROM Netflix_Dataset_Rating WHERE User_ID = (SELECT User_ID FROM Netflix_Dataset_Rating GROUP BY (User_ID) ORDER BY count(user_ID) DESC LIMIT 1) ORDER BY Rating ;
SELECT Rating FROM Netflix_Dataset_Rating WHERE User_ID = (SELECT User_ID FROM Netflix_Dataset_Rating GROUP BY (User_ID) ORDER BY count(user_ID) DESC LIMIT 1) ORDER BY Rating DESC;
SELECT Rating FROM Netflix_Dataset_Rating GROUP BY Movie_ID Having User_ID = (SELECT User_ID FROM Netflix_Dataset_Rating GROUP BY (User_ID) ORDER BY count(user_ID) DESC LIMIT 1) ORDER BY Rating DESC;
SELECT Rating FROM Netflix_Dataset_Rating GROUP BY (Mov User_ID = (SELECT User_ID FROM Netflix_Dataset_Rating GROUP BY (User_ID) ORDER BY count(user_ID) DESC LIMIT 1) ORDER BY Rating DESC;
SELECT Movie_ID FROM Netflix_Dataset_Rating GROUP BY (Movie_ID) Having User_ID = (SELECT User_ID FROM Netflix_Dataset_Rating GROUP BY (User_ID) ORDER BY count(user_ID) DESC LIMIT 1) ORDER BY Rating DESC;
SELECT Rating,Movie_ID FROM Netflix_Dataset_Rating GROUP BY Movie_ID;
SELECT Movie_ID,R FROM Netflix_Dataset_Rating GROUP BY Movie_ID;
SELECT Rating FROM Netflix_Dataset_Rating WHERE User_ID = (SELECT User_ID FROM Netflix_Dataset_Rating GROUP BY (User_ID) ORDER BY count(user_ID) DESC LIMIT 1) ORDER BY Year_ DESC;
SELECT Rating FROM Netflix_Dataset_Rating NATURAL JOIN Netflix_Dataset_Movie WHERE User_ID = (SELECT User_ID FROM Netflix_Dataset_Rating GROUP BY (User_ID) ORDER BY count(user_ID) DESC LIMIT 1) ORDER BY Year_ DESC;
SELECT Rating FROM Netflix_Dataset_Rating NATURAL JOIN Netflix_Dataset_Movie WHERE User_ID = (SELECT User_ID FROM Netflix_Dataset_Rating GROUP BY (User_ID) ORDER BY count(user_ID) DESC LIMIT 1) ORDER BY Year_ DESC;
SELECT Rating,Year_ FROM Netflix_Dataset_Rating NATURAL JOIN Netflix_Dataset_Movie WHERE User_ID = (SELECT User_ID FROM Netflix_Dataset_Rating GROUP BY (User_ID) ORDER BY count(user_ID) DESC LIMIT 1) ORDER BY Year_ DESC;
SELECT Rating,Year_ FROM Netflix_Dataset_Rating NATURAL JOIN Netflix_Dataset_Movie WHERE User_ID = (SELECT User_ID FROM Netflix_Dataset_Rating GROUP BY (User_ID) ORDER BY count(user_ID) DESC LIMIT 1) ORDER BY Year_ ;
SELECT Rating,Year_ FROM Netflix_Dataset_Rating NATURAL JOIN Netflix_Dataset_Movie WHERE User_ID = (SELECT User_ID FROM Netflix_Dataset_Rating GROUP BY (User_ID) ORDER BY count(user_ID) DESC LIMIT 1) ORDER BY Year_ DESC;
SELECT Rating,Year_ FROM Netflix_Dataset_Rating NATURAL JOIN Netflix_Dataset_Movie WHERE User_ID = (SELECT User_ID FROM Netflix_Dataset_Rating GROUP BY (User_ID) ORDER BY count(user_ID) DESC LIMIT 1) AND Year_ != Year_ ORDER BY Year_ DESC;
SELECT Rating,Year_ FROM Netflix_Dataset_Rating NATURAL JOIN Netflix_Dataset_Movie WHERE User_ID = (SELECT User_ID FROM Netflix_Dataset_Rating GROUP BY (User_ID) ORDER BY count(user_ID) DESC LIMIT 1);
SELECT Rating FROM Netflix_Dataset_Rating NATURAL JOIN Netflix_Dataset_Movie WHERE User_ID = (SELECT User_ID FROM Netflix_Dataset_Rating GROUP BY (User_ID) ORDER BY count(user_ID) DESC LIMIT 1) LIMIT 10;
SELECT Rating FROM Netflix_Dataset_Rating NATURAL JOIN Netflix_Dataset_Movie WHERE User_ID = '305344' LIMIT 10;
SELECT Rating FROM Netflix_Dataset_Rating NATURAL JOIN Netflix_Dataset_Movie WHERE User_ID = '305344' ORDER BY Year_ DESC LIMIT 10;
SELECT Rating FROM Netflix_Dataset_Rating NATURAL JOIN Netflix_Dataset_Movie WHERE User_ID = '305344' ORDER BY Year_  LIMIT 10;
SELECT Rating FROM Netflix_Dataset_Rating NATURAL JOIN Netflix_Dataset_Movie WHERE User_ID = '305344' ORDER BY Year_  LIMIT 20;
\q
CREATE VIEW TRIAL AS SELECT * FROM Product NATURAL JOIN PC WHERE maker = 'A';
SELECT * FROM TRIAL;
SELECT * FROM TRIAL WHERE hd > 200;
CREATE OR REPLACE FUNCTION revertPCspeed() RETURNS trigger AS$$BEGIN RAISE NOTICE 'Speed was Lowered; reverting'; IF (OLD.Speed < NEW.Speed) THEN UPDATE Laptop SET Speed = OLD.Speed WHERE model = NEW.model; END IF; RETURN NEW;END;$$LANGUAGE plpgsql;
SELECT * FROM laptop;
UPDATE laptop set speed = '1' WHERE model = '2007';
SELECT * FROM laptop;
UPDATE laptop set speed = '1.83' WHERE model = '2007';
SELECT * FROM laptop;
CREATE TRIGGER LaptopSpeedTriggerAFTER UPDATE OF price ON PCFOR EACH ROWWHEN (OLD.Speed < NEW.Speed) EXECUTE PROCEDURE revertPCSpeed();
UPDATE laptop set speed = '1' WHERE model = '2007';
SELECT * FROM laptop;
UPDATE laptop set speed = '1.83' WHERE model = '2007';
\ds Laptop
\ds laptop
CREATE OR REPLACE FUNCTION LaptopSpeed() RETURNS trigger AS$$BEGIN RAISE NOTICE 'Speed was Lowered; reverting'; IF (OLD.Speed < NEW.Speed) THEN UPDATE Laptop SET Speed = OLD.Speed WHERE model = NEW.model; END IF; RETURN NEW;END;$$LANGUAGE plpgsql;
CREATE TRIGGER LaptopSpeedTriggerAFTER UPDATE OF price ON PCFOR EACH ROWWHEN (OLD.Speed < NEW.Speed) EXECUTE PROCEDURE LaptopSpeed();
DROP trigger laptopspeedtrigger ON pc;
CREATE TRIGGER LaptopSpeedTriggerAFTER UPDATE OF price ON PCFOR EACH ROWWHEN (OLD.Speed < NEW.Speed) EXECUTE PROCEDURE LaptopSpeed();
\ds laptop
\ds Laptop
UPDATE laptop set speed = '1.83' WHERE model = '2007';
UPDATE laptop set speed = '1' WHERE model = '2007';
UPDATE laptop set speed = '1.83' WHERE model = '2007';
CREATE TRIGGER LaptopSpeedTriggerAFTER UPDATE OF price ON LaptopFOR EACH ROWWHEN (OLD.Speed > NEW.Speed) EXECUTE PROCEDURE LaptopSpeed();
CREATE OR REPLACE FUNCTION LaptopSpeed() RETURNS trigger AS$$BEGIN RAISE NOTICE 'Speed was Lowered; reverting'; IF (OLD.Speed > NEW.Speed) THEN UPDATE Laptop SET Speed = OLD.Speed WHERE model = NEW.model; END IF; RETURN NEW;END;$$LANGUAGE plpgsql;
SELECT * FROM laptop;
UPDATE laptop set speed = '1' WHERE model = '2007';
UPDATE laptop set speed = '1.83' WHERE model = '2007';
UPDATE laptop set speed = speed + '1.83' WHERE model = '2007';
UPDATE laptop set speed = '1.83' WHERE model = '2007';
UPDATE laptop set speed = speed - 1;
UPDATE laptop set speed = speed + 1;
CREATE TRIGGER LaptopSpeedTriggerAFTER UPDATE OF speed ON LaptopFOR EACH ROWWHEN (OLD.Speed > NEW.Speed) EXECUTE PROCEDURE LaptopSpeed();
CREATE OR REPLACE FUNCTION LaptopSpeed() RETURNS trigger AS$$BEGIN RAISE NOTICE 'Speed was Lowered; reverting'; IF (OLD.Speed > NEW.Speed) THEN UPDATE Laptop SET Speed = OLD.Speed WHERE model = NEW.model; END IF; RETURN NEW;END;$$LANGUAGE plpgsql;
UPDATE laptop set speed = speed - 1;
UPDATE laptop set speed = speed + 1;
\q
\i day27exercises.sql
\q
\i day27exercises.sql
\i day27exercises.sql
SELECt * FROM laptop;
\i day27exercises.sql
SELECt * FROM laptop;
SELECt * FROM laptop;
\i day27exercises.sql
SELECt * FROM laptop;
\i day27exercises.sql
SELECt * FROM laptop;
\i day27exercises.sql
DROP TRIGGER laptopspeedtrigger FROM laptop;
DROP TRIGGER laptopspeedtrigger laptop;
DROP TRIGGER laptopspeedtrigger ON laptop;
\i day27exercises.sql
\i day27exercises.sql
SELECT * FROM laptop;
\i day27exercises.sql
\i day27exercises.sql
\i day27exercises.sql
\i day27exercises.sql
SELECT * FROM laptop;
SELECT * FROM laptop;
\i day27exercises.sql
\i day27exercises.sql
SELECT * FROM laptop;
\i day27exercises.sql
SELECT * FROM laptop;
\i untitled.sql
DROP TRIGGER pcpricetrigger ON PC;
SELECT * FROM PC;
\i untitled.sql
\i untitled.sql
SELECT * FROM product;
SELECT * FROM product;
\i untitled.sql
\i untitled.sql
\i untitled.sql
\i untitled.sql
SELECT * FROM product;
DELETE FROM product where model = '4001';
DELETE FROM product where model = '4001';
\i untitled.sql
SELECT * FROM product;
DELETE FROM product where model = '1888';
SELECT * FROM product;
\i untitled.sql
SELECT * FROM product;
DELETE FROM product where model = '1888';
\i untitled.sql
SELECT * FROM product;
DELETE FROM product where model = '1888';
\i untitled.sql
SELECT * FROM product;
DELETE FROM product where model = '1888';
\i untitled.sql
SELECT * FROM product;
\i ialaed20_pets_triggers.sql
\i ialaed20_pets_triggers.sql
\i ialaed20_pets_triggers.sql
\i ialaed20_pets_triggers.sql
\q
\i ialaed20_pets_triggers.sql
\i ialaed20_pets_triggers.sql
\i ialaed20_pets_triggers.sql
\i ialaed20_pets_triggers.sql
\q
\i ialaed20_pet_data.sql
\i ialaed20_pets_triggers.sql
insert into vet values ('Rex',3001,'01/03/2006','vaccine',200);
SELECT * FROM household;
SELECT * FROM household;
insert into vet values ('Rex',3001,'01/03/2006','vaccine',200);
SELECT * FROM household;
insert into household values ('Tex','04/02/2005',10, 2251, 'cat');
insert into household values ('Tex','04/02/2005',10, 3251, 'cat');
insert into household values ('Tex','04/02/2005',10, 3351, 'cat');
insert into household values ('Tex','04/02/2005',10, 3351, 'cat');
insert into household values ('Tex','04/02/2005',10, 3391, 'cat');
SELECT * FROM household;
\i ialaed20_pets_triggers.sql
insert into household values ('Tex','04/02/2005',10, 3391, 'cat');
\i ialaed20_pets_triggers.sql
DROP TRIGGER existing_name ON household;
\i ialaed20_pets_triggers.sql
insert into household values ('Tex','04/02/2005',10, 3391, 'cat');
insert into household values ('Tex','04/02/2005',10, 3991, 'cat');
\i ialaed20_pets_triggers.sql
SELECT * FROM household;
\i ialaed20_pets_triggers.sql
insert into household values ('Tex','04/02/2005',10, 3691, 'cat');
SELECT * FROM household;
\i ialaed20_pets_triggers.sql
insert into vet values ('Rex',3001,'01/03/2006','vaccine',200);
insert into vet values ('Rex',3001,'01/03/1116','vaccine',200);
\i ialaed20_pets_triggers.sql
insert into vet values ('Rex',3001,'01/03/116','vaccine',200);
\i ialaed20_pets_triggers.sql
insert into vet values ('Rex',3001,'01/03/1160','vaccine',200);
\i ialaed20_pets_triggers.sql
\i ialaed20_pets_triggers.sql
\i ialaed20_pets_triggers.sql
\i ialaed20_pets_triggers.sql
insert into vet values ('Rex',3001,'01/03/60','vaccine',200);
insert into vet values ('Rex',3001,'01/03/600','vaccine',200);
SELECT * FROM vet;
\i ialaed20_pet_data.sql
SELECT * FROM vet;
\i ialaed20_pets_triggers.sql
SELECT * FROM vet;
insert into vet values ('Rex',3001,'01/03/600','vaccine',200);
SELECT * FROM vet;
\i ialaed20_pets_triggers.sql
\i ialaed20_pet_data.sql
\i ialaed20_pets_triggers.sql
\i untitled.txt
\i untitled.txt
\i untitled.txt
\i untitled.txt
\i untitled.txt
\i ialaed20_pets_changelog.sql
\i ialaed20_pets_changelog.sql
\i ialaed20_pets_changelog.sql
\i ialaed20_pets_changelog.sql
\i ialaed20_changelog_demo.sql
\i ialaed20_changelog_demo.sql
\i ialaed20_changelog_demo.sql
\i ialaed20_changelog_demo.sql
\i ialaed20_changelog_demo.sql
\i ialaed20_changelog_demo.sql
\i ialaed20_changelog_demo.sql
\q
\i ialaed20_changelog_demo.sql
\i ialaed20_changelog_demo.sql
SELECT * from changelog;
SELECT * from changelog;
\i ialaed20_changelog_demo.sql
SELECT * from changelog;
SELECT * from household;
\i ialaed20_changelog_demo.sql
SELECT * from changelog;
\q
\i ialaed20_changelog_demo.sql
./ DAY6.sql;
./DAY6.sql;
/q;
.\DAY6.sql;
.\DAY6.sql
\iDAY6.sql
\i DAY6.sql
\i day14exercises.sql
\i day28exercises.sql
SELECT * FROM laptop;
SELECT * FROM laptop;
\i day28exercises.sql
SELECT * FROM laptop;
/i Dataset.sql;
\i Dataset.sql;
\q
SELECT * FROM Netflix_Dataset_Movie;
\COPY Netflix_Dataset_Movie(Movie_ID,Year_,Name) FROM 'Netflix_Dataset_Movie.csv' DELIMITER ',' CSV HEADER;
\COPY Netflix_Dataset_Rating(User_ID,Rating,Movie_ID,Key_) FROM 'Netflix_Dataset_Rating.csv' DELIMITER ',' CSV HEADER;
SELECT * FROM Netflix_Dataset_Movie;
\q
SELECT * FROM Netflix_Dataset_Movie;
\q
SELECT count(rating) FROM Netflix_Dataset_Rating;
\q
SELECT * FROM pc;
\q
\i practice.sql
\i practice.sql
\i practice.sql
\i practice.sql
SELECT * FROM pc;
SELECT * FROM pc;
\i practice.sql
DISPLAY TRIGGER ON PC;
SHOW TRIGGER ON PC;
SHOW TRIGGER IN PC;
SHOW TRIGGER FROM PC;
SHOW TRIGGER in PC;
SHOW TRIGGERS in PC;
SHOW TRIGGERS IN PC;
\d
SHOW TRIGGERS IN Product;
SHOW TRIGGERS Product;
SHOW TRIGGERS ;
SHOW TRIGGERS;
\i practice.sql
\i practice.sql
\ds PC
\ds product
\q
/q
\q
\i lab1.python 
\i lab1.python python3
\i lab1.python python3
\i lab1.python 
\q
SELECT AVERAGE(TMAX) FROM rww-weather-data.csv GROUP BY (TMAX);
SELECT AVERAGE(TMAX) FROM yes.csv GROUP BY (TMAX);
\q
SELECT AVERAGE(TMAX) FROM yes.csv GROUP BY (TMAX);
ls;
\q
SELECT AVERAGE(TMAX) FROM yes GROUP BY (TMAX);
SELECT AVERAGE(TMAX) FROM yes GROUP BY (TMAX);
\q
SELECT AVERAGE(TMAX) FROM yes GROUP BY (TMAX);
\d yes.csv
\d rww-weather-data.csv
\d rww-weather-data
\d yes
/q
\q
\q
COPY tablename(attribute1, attribute2, attribute3, attribute4...)FROM './path/to/file.csv'DELIMITER ','CSV HEADER;
COPY tablename(#DATE,PRCP,TMAX,TMIN)FROM './path/to/file.csv'DELIMITER ','CSV HEADER;
COPY rww-weather-data.csv(#DATE,PRCP,TMAX,TMIN)FROM './path/to/file.csv'DELIMITER ','CSV HEADER;
COPY yes.csv(DATE,PRCP,TMAX,TMIN)FROM './path/to/file.csv'DELIMITER ','CSV HEADER;
COPY yes.cvs(DATE,PRCP,TMAX,TMIN)FROM './path/to/file.csv'DELIMITER ','CSV HEADER;
\copy hank_aaron_career(Year, Team, Games, At_bats, Runs, Hits, Runs_batted_in, Home_runs) FROM 'hank_aaron_stats.csv' DELIMITER ',' CSV HEADER
\copy weather(DATE,PRCP,TMAX,TMIN) FROM 'rww-weather-data.csv' DELIMITER ',' CSV HEADER
\copy yes(DATE,PRCP,TMAX,TMIN) FROM 'rww-weather-data.csv' DELIMITER ',' CSV HEADER
\copy yes.csv(DATE,PRCP,TMAX,TMIN) FROM 'rww-weather-data.csv' DELIMITER ',' CSV HEADER
\copy rww-weather-data.csv(DATE,PRCP,TMAX,TMIN) FROM 'rww-weather-data.csv' DELIMITER ',' CSV HEADER
\copy rww-weather-data(DATE,PRCP,TMAX,TMIN) FROM 'rww-weather-data.csv' DELIMITER ',' CSV HEADER
\q
\copy hank_aaron_career(Year, Team, Games, At_bats, Runs, Hits, Runs_batted_in, Home_runs) FROM 'hank_aaron_stats.csv' DELIMITER ',' CSV HEADER
\copy weather(#DATE,PRCP,TMAX,TMIN) FROM 'rww-weather-data.csv' DELIMITER ',' CSV HEADER
CREATE TABLE weather (#DATE,PRCP,TMAX,TMIN);
CREATE TABLE weather (DATE,PRCP,TMAX,TMIN);
CREATE TABLE weather (DATE,PRCP,TMAX,TMIN);
CREATE TABLE weather (DATE date,PRCP int,TMAX int,TMIN int);
\copy weather(DATE,PRCP,TMAX,TMIN) FROM 'rww-weather-data.csv' DELIMITER ',' CSV HEADER
DROP TABLE weather;
CREATE TABLE weather (DATE date,PRCP float,TMAX int,TMIN int);
\copy weather(DATE,PRCP,TMAX,TMIN) FROM 'rww-weather-data.csv' DELIMITER ',' CSV HEADER
\q
/i lab1.python;
\i lab1.python;
\q
SELECT year(Date) FROM weather GROUP BY year(Date);
SELECt * from weather;
SELECT year(date) FROM weather GROUP BY year(date);
SELECT year(date) FROM weather;
SELECT YEAR(date) FROM weather;
SELECT date FROM weather;
SELECT date FROM weather GROUP BY date;
SELECT * FROM weather GROUP BY date;
SELECT * FROM weather GROUP BY date AND prcp;
SELECT TMAX FROM weather GROUP BY date;
SELECT TMAX FROM weather GROUP BY YEAR(date);
CREATE TABLE weather (DATE year,PRCP float,TMAX int,TMIN int);
CREATE TABLE weather (DATE date,PRCP float,TMAX int,TMIN int);
SELECT TMAX FROM weather GROUP BY YEAR(date);
SELECT TMAX FROM weather GROUP BY date;
SELECT SUM(TMAX) FROM weather GROUP BY date;
SELECT AVERAGE(TMAX) FROM weather GROUP BY date;
SELECT AVG(TMAX) FROM weather GROUP BY date;
\q
SELECT AVG(TMAX) FROM weather GROUP BY date;
SELECT date,AVG(TMAX) FROM weather GROUP BY date;
SELECT date,AVG(TMAX) FROM weather GROUP BY date order by date;
SELECT year(date),AVG(TMAX) FROM weather GROUP BY date order by date;
SELECT AVG(date),AVG(TMAX) FROM weather GROUP BY date order by date;
SELECT AVG(TMAX) FROM weather GROUP BY date order by date;
SELECT date FROM weather GROUP BY date order by date;
SELECt  EXTRACT(year FROM date) AS year FROM weather GROUP BY EXTRACT(year FROM date);
SELECt  EXTRACT(year FROM date) AS year FROM weather GROUP BY EXTRACT(year FROM date) ORDER BY EXTRACT(year FROM date);
SELECt  EXTRACT(year FROM date) AS year, AVG(TMAX) FROM weather GROUP BY EXTRACT(year FROM date) ORDER BY EXTRACT(year FROM date);
\q
DROP weather;
DROP TABLE weather;
\q
CREATE TABLE weather (DATE date,PRCP float,TMAX int,TMIN int);
\copy weather(DATE,PRCP,TMAX,TMIN) FROM 'rww-weather-data.csv' DELIMITER ',' CSV HEADER
\q
DROP TABLE weather;
\i First.sql
\q
\i First.sql
\q
\q
/i drinks-Copy1.sv;
/i drinks-Copy1.csv;
\i drinks-Copy1.csv;
\q
