     int i, j,a,*count,*values,*values2,*values3,step = 0;
        count = (int*)calloc(n, sizeof(int));
    values = (int*)calloc(n, sizeof(int));
   values2 = (int*)calloc(n, sizeof(int));
       values3 = (int*)calloc(n, sizeof(int));



    for(i = 0; i < n; i++){
        for(j = 0; j < n; j++){
            if (coins[i]>coins[j]){
                a = coins[i];
                coins[i] = coins[j];
                coins[j] = a;
            }
        }
    }
    
       for(i = 0; i < n; i++){
            values[i]= val;
       }
                                
     for(i = 0; i < n; i++){
         if(values[i]>= coins[i]){
             values[i] = values[i] - coins[i];
             step = step + 1;
             count[i] = step;
             if (values[i] == 0){
                 count[i] = step;
                 step = 0;
                 return count[i];
             }


             
         }
         
         
         
   
  
        // if (val != 0){
        // if (val< coins[-1]){
        //    step = step - 1;
        //    val = val + coins[i];
        // }

       // }
     }
       for(i = 0; i < n; i++){
           if(values[i]<= coins[n-1]){
                values2[i] = values[i];}
               }
    
   for(i = 0; i < n; i++){
       if (values2[i]>0){
           values3[i] = values2[i];
           printf("%d,",values3[i]);

       }
       

    }


                                  printf("\n");


    for(i = 0; i < n-1; i++){
         if (values[i]>coins[i]){
             step = step + 1;
             count[i] = step;
             divide_and_conquer( values[i]-coins[i],  coins,  n, table);
         }
     }
    